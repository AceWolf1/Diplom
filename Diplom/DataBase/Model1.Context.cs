//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Diplom.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Chipset> Chipset { get; set; }
        public virtual DbSet<ClockSpeed> ClockSpeed { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Conector> Conector { get; set; }
        public virtual DbSet<ConectorCPU> ConectorCPU { get; set; }
        public virtual DbSet<CoolingProcessor> CoolingProcessor { get; set; }
        public virtual DbSet<CpuFamilyID> CpuFamilyID { get; set; }
        public virtual DbSet<DataStorage> DataStorage { get; set; }
        public virtual DbSet<GenerationCPU> GenerationCPU { get; set; }
        public virtual DbSet<GPU> GPU { get; set; }
        public virtual DbSet<InternalStorage> InternalStorage { get; set; }
        public virtual DbSet<Manufacturer> Manufacturer { get; set; }
        public virtual DbSet<ManufacturerGPU> ManufacturerGPU { get; set; }
        public virtual DbSet<MemoryBusWidth> MemoryBusWidth { get; set; }
        public virtual DbSet<MotherBoard> MotherBoard { get; set; }
        public virtual DbSet<PC> PC { get; set; }
        public virtual DbSet<PCCost> PCCost { get; set; }
        public virtual DbSet<PCI_E> PCI_E { get; set; }
        public virtual DbSet<Power> Power { get; set; }
        public virtual DbSet<PowerSupply> PowerSupply { get; set; }
        public virtual DbSet<Processor> Processor { get; set; }
        public virtual DbSet<ProcessorFrequency> ProcessorFrequency { get; set; }
        public virtual DbSet<QuantityCore> QuantityCore { get; set; }
        public virtual DbSet<Ram> Ram { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<Socket> Socket { get; set; }
        public virtual DbSet<SpeedOfReading> SpeedOfReading { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TowerPC> TowerPC { get; set; }
        public virtual DbSet<TypeCooling> TypeCooling { get; set; }
        public virtual DbSet<TypeOfMemory> TypeOfMemory { get; set; }
        public virtual DbSet<TypeTower> TypeTower { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Videocard> Videocard { get; set; }
        public virtual DbSet<VideoRam> VideoRam { get; set; }
        public virtual DbSet<FormFactor> FormFactor { get; set; }
        public virtual DbSet<Position> Position { get; set; }
        public virtual DbSet<configpc> configpc { get; set; }
        public virtual DbSet<configpc1> configpc1 { get; set; }
        public virtual DbSet<configpc2> configpc2 { get; set; }
    
        public virtual ObjectResult<GetComponentsByCategory_Result> GetComponentsByCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComponentsByCategory_Result>("GetComponentsByCategory", categoryNameParameter);
        }
    
        public virtual ObjectResult<PR_InfoOnAssNum_Result> PR_InfoOnAssNum(Nullable<int> sum)
        {
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PR_InfoOnAssNum_Result>("PR_InfoOnAssNum", sumParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
